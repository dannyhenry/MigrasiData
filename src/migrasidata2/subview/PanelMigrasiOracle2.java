/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package migrasidata2.subview;

import java.lang.reflect.InvocationTargetException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import migrasidata2.database.ColumnDescription;
import migrasidata2.database.DataMigrasi;
import migrasidata2.database.Database;
import migrasidata2.database.DatabaseInformation;
import migrasidata2.database.KeyDescription;
import migrasidata2.pluginsclass.AutoResizeTable1;
import migrasidata2.view.FormConfigurasiMySQL;
import migrasidata2.view.FormConfigurasiOracle;
import migrasidata2.view.SaveLog;

/**
 *
 * @author Kaitero
 */
public class PanelMigrasiOracle2 extends javax.swing.JPanel {

    /**
     * Creates new form PanelMigrasiOracle
     */
    private DatabaseInformation di = new DatabaseInformation();
    private DefaultListModel listmodel = new DefaultListModel();
    private DefaultListModel listmodel2 = new DefaultListModel();
    private ArrayList<DataMigrasi> listData = new ArrayList<DataMigrasi>();
    private ArrayList<String> listTable;
    private ArrayList<ColumnDescription> listStruktur;
    private List last = null;
    private Database db = Database.getPk();
    private DefaultTableModel model1 = new DefaultTableModel(0, 3) {
        Class[] ColumnTypes = {Boolean.class, String.class, String.class};
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return ColumnTypes[columnIndex];
        }
    };
    private String log = "";

    public PanelMigrasiOracle2() {
        initComponents();
        loadListTabel();
        jLabel1.setText("");
        jTable1.setModel(model1);
        jList2.setModel(listmodel);
        jList1.setModel(listmodel2);
        kondisiFullMigrasi();
        refreshTabel();
    }

    public void kondisiFullMigrasi() {
        jTable1.setEnabled(false);
        jButton2.setEnabled(false);
        jList2.setEnabled(false);
    }

    public void kondisiCustomMigrasi() {
        jTable1.setEnabled(true);
        jList2.setEnabled(true);
    }
    
    public void kondisiMenunggu() {
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
    }

    public void selesaiMenunggu() {
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
    }

    public void loadListTabel() {
        listmodel.removeAllElements();
        listTable = di.loadListTable("oracle");
        for (int i = 0; i < listTable.size(); i++) {
            listmodel.addElement(listTable.get(i));
        }
    }

    public void refreshTabel() {
        model1.setRowCount(0);
        model1.setColumnCount(0);
    }

    public void loadStrukturToTabel() {
        refreshTabel();
        model1.setColumnIdentifiers(new Object[]{"Selection", "Nama Kolom", "Tipe Data"});
        for (int i = 0; i < listStruktur.size(); i++) {
            model1.insertRow(i, new Object[]{true, listStruktur.get(i).getNamaKolom(), listStruktur.get(i).getTipedata()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jProgressBar1 = new javax.swing.JProgressBar();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full Migration", "Custom Migration" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("Start Migration");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jButton2.setText("ADD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList1);

        jButton3.setText("Remove");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedIndex() == 0) {
            kondisiFullMigrasi();
        } else {
            kondisiCustomMigrasi();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        kondisiMenunggu();
        ArrayList<ColumnDescription> col = new ArrayList<ColumnDescription>();
        String listKolom = "";
        if (jList2.getSelectedIndex() != -1) {
            for (int i = 0; i < model1.getRowCount(); i++) {
                boolean cek = (boolean) jTable1.getValueAt(i, 0);
                if (cek) {
                    String namaKolom = jTable1.getValueAt(i, 1).toString();
                    listKolom = listKolom + namaKolom + ",";
                    for (int j = 0; j < listStruktur.size(); j++) {
                        if (namaKolom.equalsIgnoreCase(listStruktur.get(j).getNamaKolom())) {
                            col.add(listStruktur.get(j));
                        }
                    }
                }
            }
            listKolom = listKolom.substring(0, listKolom.length() - 1);
            ResultSet rs = db.eksekusiSelectOracle("select " + listKolom + " from " + jList2.getSelectedValue().toString());
            try {
                listData.add(new DataMigrasi(jList2.getSelectedValue().toString(), col, di.loadIsiData3(rs, rs.getMetaData()), di.loadAllKeys2("oracle", jList2.getSelectedValue().toString(), listKolom), listKolom));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            listmodel2.addElement(jList2.getSelectedValue());
            listmodel.remove(jList2.getSelectedIndex());
            refreshTabel();
        }
        selesaiMenunggu();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // TODO add your handling code here:
        if (jList2.getSelectedIndex() != -1) {
            jButton2.setEnabled(true);
            String tabel = jList2.getSelectedValue().toString();
            ResultSet rs = db.eksekusiSelectOracle("select * from " + tabel);
            try {
                ResultSetMetaData rsmd = rs.getMetaData();
                listStruktur = di.loadStruktur(rsmd, tabel);
                loadStrukturToTabel();
                new AutoResizeTable1().sesuaikanKolom(jTable1);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            jButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jList2ValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        kondisiMenunggu();
        if (jList1.getSelectedIndex() != -1) {
            for (int i = 0; i < listData.size(); i++) {
                if (listData.get(i).getNamaTable().equalsIgnoreCase(jList1.getSelectedValue().toString())) {
                    System.out.println(jList1.getSelectedValue().toString());
                    listData.remove(i);
                    i = listData.size();
                    System.out.println(listData.size());
                }
            }
            listmodel.addElement(jList1.getSelectedValue());
            listmodel2.remove(jList1.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(null, "Maaf Tidak Ada Data yang Dipilih");
        }
        selesaiMenunggu();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        log = "";
        if (jComboBox1.getSelectedItem().toString().equals("Custom Migration")) {
            customMigrasi();
        } else {
            fullMigrasi();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void customMigrasi() {
        jProgressBar1.setStringPainted(true);
        log = "Migrasi From ORACLE To MYSQL \n";
        log = log + "Source Schema : " + FormConfigurasiMySQL.getConfMy().getSelectedDb() + " \n";
        log = log + "Destination Schema : " + FormConfigurasiOracle.getConfOra().getSchema() + " \n";
        log = log + "Migration Type : CUSTOM MIGRATION \n";
        log = log + "Migration Time : " + Calendar.getInstance().getTime().toString();
        ArrayList<DataMigrasi> dataMigrasi = listData;
        listData = null;
        readDataMigrasi(dataMigrasi);
    }

    public void fullMigrasi() {
        jProgressBar1.setStringPainted(true);
        log = "Migrasi From ORACLE To MYSQL \n";
        log = log + "Source Schema : " + FormConfigurasiMySQL.getConfMy().getSelectedDb() + " \n";
        log = log + "Destination Schema : " + FormConfigurasiOracle.getConfOra().getSchema() + " \n";
        log = log + "Migration Type : FULL MIGRATION \n";
        log = log + "Migration Time : " + Calendar.getInstance().getTime().toString();
        loadListTabel();
        ArrayList<DataMigrasi> dataMigrasi = new ArrayList<DataMigrasi>();
        for (int i = 0; i < listTable.size(); i++) {
            ResultSet rs = db.eksekusiSelectOracle("select * from " + listTable.get(i));
            try {
                ResultSetMetaData rsmd = rs.getMetaData();
                dataMigrasi.add(new DataMigrasi(listTable.get(i), di.loadStruktur(rsmd, listTable.get(i)),
                        di.loadIsiData3(rs, rsmd), di.loadAllKeys("oracle", listTable.get(i))));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        readDataMigrasi(dataMigrasi);
    }

    public void readDataMigrasi(ArrayList<DataMigrasi> dm) {
        String namatabel = "";
        String query = "";
        String tipedata = "";
        ArrayList<String> listquery = new ArrayList<String>();
        for (int i = 0; i < dm.size(); i++) {
            namatabel = dm.get(i).getNamaTable();
            dm.get(i).setNamaBaru(namatabel);
            query = "create table " + namatabel + "( \n";
            ArrayList<ColumnDescription> listStruktur1 = dm.get(i).getListStruktur();
            for (int j = 0; j < listStruktur1.size(); j++) {
                tipedata = cekTipeData(listStruktur1.get(j).getTipedata(), listStruktur1.get(j).getPanjangkolom(), listStruktur1.get(j).getKomaKolom());
                if (j < listStruktur1.size() - 1) {
                    query = query + listStruktur1.get(j).getNamaKolom() + " " + tipedata + " " + listStruktur1.get(j).nullAbles() + ",";
                } else {
                    query = query + listStruktur1.get(j).getNamaKolom() + " " + tipedata + " " + listStruktur1.get(j).nullAbles();
                }
                query = query + "\n";
            }
            query = query + ")ENGINE = INNODB";
            listquery.add(query);
            listquery.add("##" + namatabel);
            ArrayList<String> listData = dm.get(i).getListData();
            for (int j = 0; j < listData.size(); j++) {
                query = "insert into " + namatabel + " values (" + listData.get(j) + ")";
                listquery.add(query);
            }
        }

        listquery.add("======");

        //primary key
        for (int i = 0; i < dm.size(); i++) {
            ArrayList<KeyDescription> listkey = dm.get(i).getListKey();
            String kolomkey = "";
            String namaKonstraint = "";
            for (int j = 0; j < listkey.size(); j++) {
                if (listkey.get(j).getJenisKey().equals("PRIMARY KEY")) {
                    kolomkey = kolomkey + listkey.get(j).getNamaKolom() + ",";
                }
            }
            if (!kolomkey.equals("")) {
                kolomkey = kolomkey.substring(0, kolomkey.length() - 1);
                query = "alter table " + dm.get(i).getNamaBaru() + " ADD PRIMARY KEY(" + kolomkey + ")";
                listquery.add(query);
            }
        }

        if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Full Migration")) {
            //foreign key
            for (int i = 0; i < dm.size(); i++) {
                ArrayList<KeyDescription> listkey = dm.get(i).getListKey();
                for (int j = 0; j < listkey.size(); j++) {
                    if (listkey.get(j).getJenisKey().equalsIgnoreCase("FOREIGN KEY")) {
                        query = "alter table " + dm.get(i).getNamaBaru() + " add CONSTRAINT " + listkey.get(j).getNamaKey()
                                + " FOREIGN KEY (" + listkey.get(j).getNamaKolom() + ") REFERENCES " + listkey.get(j).getNamaTabel() + " ("
                                + listkey.get(j).getAsalKey() + ")";
                        listquery.add(query);
                    }
                }
            }
        }

        //index
        for (int i = 0; i < dm.size(); i++) {
            ArrayList<KeyDescription> listkey = dm.get(i).getListKey();
            for (int j = 0; j < listkey.size(); j++) {
                if (listkey.get(j).getJenisKey().equalsIgnoreCase("INDEX KEY")) {
                    if (listkey.get(j).getNamaKey().equals(listkey.get(j - 1).getNamaKey()) && j != 0) {
                        query = "CREATE INDEX IDX_" + listkey.get(j).getNamaKey() + j + " ON "
                                + dm.get(i).getNamaBaru() + "(" + listkey.get(j - 1).getNamaKolom() + "," + listkey.get(j).getNamaKolom() + ")";
                        listquery.remove(listquery.size() - 1);
                    } else {
                        query = "CREATE INDEX IDX_" + listkey.get(j).getNamaKey() + j + " ON "
                                + dm.get(i).getNamaBaru() + "(" + listkey.get(j).getNamaKolom() + ")";
                    }
                    listquery.add(query);
                }
            }
        }
        
        //unique
        for (int i = 0; i < dm.size(); i++) {
            ArrayList<KeyDescription> listkey = dm.get(i).getListKey();
            for (int j = 0; j < listkey.size(); j++) {
                if (listkey.get(j).getJenisKey().equalsIgnoreCase("UNIQUE KEY")) {
                    query="alter table "+dm.get(i).getNamaBaru()+" ADD UNIQUE ("+listkey.get(j).getNamaKolom() + ")";
                    listquery.add(query);
                }
            }
        }
        
        jLabel1.setText("Moving Data to Destination Schema......");
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(listquery.size());
        new Thread() {
            @Override
            public void run() {
                eksekusiData(listquery);
            }
        }.start();
    }

    public void eksekusiData(ArrayList<String> listquery) {
        int sukses = 0, gagal = 0;
        int countSukses = 0, countGagal = 0;
        int masukposisi = 0;
        String logtable = "";
        boolean cekposisi = false;
        int notcount = 0;
//        for (int i = 0; i < listquery.size(); i++) {
//            System.out.println(listquery.get(i));
//
//        }
        for (int i = 0; i < listquery.size(); i++) {
            Runnable runner = new Runnable() {
                public void run() {
                    int value = jProgressBar1.getValue();
                    jProgressBar1.setValue(value + 1);
                }
            };
            try {
                SwingUtilities.invokeAndWait(runner);
                if (listquery.get(i).contains("##")) {
                    if (masukposisi == 0) {
                        logtable = logtable + listquery.get(i) + "\n";
                    } else {
                        logtable = logtable + "     Sukses : " + countSukses + " \n";
                        logtable = logtable + "     Gagal  : " + countGagal + " \n";
                        logtable = logtable + listquery.get(i) + "\n";
                    }
                    masukposisi++;
                    countSukses = 0;
                    countGagal = 0;
                    cekposisi = true;
                } else if (listquery.get(i).contains("======")) {
                    logtable = logtable + "     Sukses : " + countSukses + " \n";
                    logtable = logtable + "     Gagal  : " + countGagal + " \n";
                    countSukses = 0;
                    countGagal = 0;
                    cekposisi = false;
                }
                if (cekposisi) {
                    if (!listquery.get(i).substring(0, 2).equals("##")) {
                        System.out.println(listquery.get(i));
                        boolean hasil = db.eksekusiQueryDML(listquery.get(i));
                        if (hasil) {
                            sukses++;
                            countSukses++;
                        } else {
                            gagal++;
                            countGagal++;
                        }
                    }
                } else {
                    if (!listquery.get(i).equals("======")) {
//                        System.out.println(listquery.get(i));
                        boolean hasil = db.eksekusiQueryDML(listquery.get(i));
                        if (hasil) {
                            sukses++;
                        } else {
                            gagal++;
                        }
                    }
                }
                Thread.sleep(1);
            } catch (InterruptedException ignoredException) {
                ignoredException.printStackTrace();
            } catch (InvocationTargetException ignoredException) {
                ignoredException.printStackTrace();
            }
        }
        log = log + " - " + Calendar.getInstance().getTime().toString() + "\n";
        log = log + logtable + " \n";
        log = log + "Total Proses   : " + (sukses + gagal) + " Process \n";
        log = log + "Total Sukses   : " + sukses + " Proccess \n";
        log = log + "Total Gagal    : " + gagal + " Process \n";
        SaveLog sl = new SaveLog(log);
        sl.setVisible(true);
        jLabel1.setText("Moving Data Finished........");
        listData.removeAll(listData);
    }

    public String cekTipeData(String tipe, int panjang, int koma) {
        tipe = tipe.toUpperCase();
        switch (tipe) {
            case "NUMBER":
                if (koma <= 0) {
                    if (panjang >= 11) {
                        tipe = "BIGINT";
                    } else if (panjang >= 8) {
                        tipe = "INT";
                    } else if (panjang > 6) {
                        tipe = "MEDIUMINT";
                    } else {
                        tipe = "SMALLINT";
                    }
                } else {
                    tipe = "DOUBLE(" + panjang + "," + koma + ")";
                }
                break;
            case "VARCHAR2":
                tipe = "VARCHAR(" + panjang + ")";
                break;
            case "DATE":
                tipe = "DATETIME";
                break;
            case "FLOAT":
                tipe = "DOUBLE(" + panjang + ")";
                break;
            case "CHAR":
                tipe = "CHAR(" + panjang + ")";
                break;
        }
        return tipe;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
